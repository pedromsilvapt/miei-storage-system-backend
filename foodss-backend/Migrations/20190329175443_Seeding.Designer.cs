// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StorageSystem.Models;

namespace StorageSystem.Migrations
{
    [DbContext(typeof(StorageSystemContext))]
    [Migration("20190329175443_Seeding")]
    partial class Seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StorageSystem.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(200);

                    b.Property<bool>("HasExpiryDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("StorageId");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StorageSystem.Models.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailableCount");

                    b.Property<int>("ConsumedCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ExpiryDate");

                    b.Property<int>("OwnerId");

                    b.Property<int>("ProductId");

                    b.Property<bool>("Shared");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("StorageSystem.Models.ShoppingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<int>("OwnerId");

                    b.Property<int>("ProductId");

                    b.Property<int>("StorageId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingListItems");
                });

            modelBuilder.Entity("StorageSystem.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OwnerId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Despensa Privada",
                            OwnerId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Despensa Partilhada",
                            OwnerId = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Despensa Partilhada",
                            OwnerId = 2,
                            Type = 0
                        });
                });

            modelBuilder.Entity("StorageSystem.Models.StorageInvitation", b =>
                {
                    b.Property<int>("StorageId");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(254);

                    b.Property<int?>("UserId");

                    b.HasKey("StorageId", "UserEmail");

                    b.HasIndex("UserEmail");

                    b.HasIndex("UserId");

                    b.ToTable("StorageInvitations");
                });

            modelBuilder.Entity("StorageSystem.Models.StorageUser", b =>
                {
                    b.Property<int>("StorageId");

                    b.Property<int>("UserId");

                    b.HasKey("StorageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StorageUsers");

                    b.HasData(
                        new
                        {
                            StorageId = 2,
                            UserId = 1
                        },
                        new
                        {
                            StorageId = 2,
                            UserId = 2
                        },
                        new
                        {
                            StorageId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("StorageSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(264);

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "pedro@alunos.uminho.pt",
                            Name = "Pedro M. Silva",
                            Password = "password",
                            Salt = "123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "gustavo@alunos.uminho.pt",
                            Name = "Gustavo Linhares",
                            Password = "password",
                            Salt = "123"
                        });
                });

            modelBuilder.Entity("StorageSystem.Models.UserProductPreference", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ProductId");

                    b.Property<int>("MinCount");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductPreferences");
                });

            modelBuilder.Entity("StorageSystem.Models.Product", b =>
                {
                    b.HasOne("StorageSystem.Models.Storage", "Storage")
                        .WithMany("Products")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StorageSystem.Models.ProductItem", b =>
                {
                    b.HasOne("StorageSystem.Models.User", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StorageSystem.Models.ShoppingListItem", b =>
                {
                    b.HasOne("StorageSystem.Models.Product", "Product")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.Storage", "Storage")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.User", "User")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("StorageSystem.Models.Storage", b =>
                {
                    b.HasOne("StorageSystem.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StorageSystem.Models.StorageInvitation", b =>
                {
                    b.HasOne("StorageSystem.Models.Storage", "Storage")
                        .WithMany("Invitations")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.User")
                        .WithMany("Invitations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("StorageSystem.Models.StorageUser", b =>
                {
                    b.HasOne("StorageSystem.Models.Storage", "Storage")
                        .WithMany("Users")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.User", "User")
                        .WithMany("Storages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StorageSystem.Models.UserProductPreference", b =>
                {
                    b.HasOne("StorageSystem.Models.Product", "Product")
                        .WithMany("Preferences")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StorageSystem.Models.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
